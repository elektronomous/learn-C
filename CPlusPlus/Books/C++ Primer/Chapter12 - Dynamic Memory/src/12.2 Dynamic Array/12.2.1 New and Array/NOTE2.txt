When a unique_ptr points to an array, we cannot use the dot and arrow 
member access operators.

On the other hand, when a unqiue_ptr points to an array, we can use the
subscript operator to access the elements in the array.

    for (size_t i = 0; i < 10; i++)
        up[i] = i;      // assign new value

If we want to use a shared_ptr to manage a dynamic array, we must provide
our own deleter:

    shared_ptr<int> sp(new int[10], [](int *p) { delete [] p; });
    sp.reset();         // use the lambda we supplied that uses delete[] to free the array

The fact that shared_ptr does not directly support managing arrays affects
how we access the elements in the array:

    for (size_t i = 0; i<10; i++)
        *(sp.get() + i) = i;        // use get to get built-in pointer

There is no subscript operator for shared_ptrs, and the smart pointer types do
not support pointer arithmetic