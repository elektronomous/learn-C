lower_bound and upper_bound not valid for the unordered containers.
Subscript and at operations only for map and unordered_map that are not const.

c.find(k)           Returns an iterator to the (first) element with key k, or the off-the-end
                    iterator if k is not in the container.
c.count(k)          Returns the number of elements with key k. For the containers with
                    unique keys, the result is always zero or one.
c.lower_bound(k)    Returns an iterator to the first element with key not less than k.
c.upper_bound(k)    Returns an iterator to the first element with key greater than k.
c.equal_range(k)    Returns a pair of iterators denoting the elements with key k. If k is
                    not present, both members are c.end().

When a multimap or multiset has multiple elements of a given
key, those elements will be adjacent within the container.

If the key is in the container, the iterator returned from lower_bound will refer to the first instance
of that key and the iterator returned by upper_bound will refer just after the last
instance of the key.

Thus, calling lower_bound and upper_bound on the same key yields an iterator range (§ 9.2.1, p. 331) that
denotes all the elements with that key

If the element we’re looking for has the largest key in the container, then upper_bound on that key 
returns the off-the-end iterator. If the key is not present and is larger than any key in the container, 
then the return from lower_bound will also be the off-the-end iterator.

If there is no element for this key, then lower_bound and upper_bound will be equal. Both will refer to
the point at which this key can be inserted while maintaining the container order.

equal_range:
return pair of iterators. If the key is present, then the first iterator refers to the first instance 
of the key and the second iterator refers one past the last instance of the key

