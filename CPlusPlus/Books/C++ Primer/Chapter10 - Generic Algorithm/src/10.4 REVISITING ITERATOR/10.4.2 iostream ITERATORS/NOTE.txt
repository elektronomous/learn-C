An istream_iterator (Table 10.3 (overleaf)) reads an input stream, and an ostream_iterator (Table 10.4
(p. 405)) writes an output stream.

These iterators treat their corresponding stream as a sequence of elements of a specified type
	
	istream_iterator<int> int_it(cin);   // reads ints from cin
	istream_iterator<int> int_eof;       // end iterator value
	ifstream in("afile");
	istream_iterator<string> str_it(in); // reads strings from "afile"

iterator was defined as the empty istream_iterator, which is used as the end iterator

An iterator bound to a stream is equal to the end iterator once its associated stream hits endof-file or encounters an IO error.

++in, in++ Reads the next value from the input stream using the >> operator for the
element type. As usual, the prefix version returns a reference to the
incremented iterator. The postfix version returns the old value.

We are guaranteed that before we dereference the iterator for the first time, the stream will have been read. 
When we create an ostream_iterator, we may (optionally) provide a second argument that specifies a character 
string to print following each element.
 = That string must be a C-style character string (i.e., a string literal or a pointer to a null-terminated array)
We must bind an ostream_iterator to a specific stream. There is no empty or off-the-end ostream_iterator.

	ostream_iterator<T> out(os); 				out writes values of type T to output stream os.
	ostream_iterator<T> out(os, d); 			out writes values of type T followed by d to
												output stream os. d points to a null-terminated
												character array.
	out = val 									Writes val to the ostream to which out is bound using the << operator.
												val must have a type that is compatible with the type that out can write.
	*out, ++out,								These operations exist but do nothing to out. Each operator returns out.
	out++