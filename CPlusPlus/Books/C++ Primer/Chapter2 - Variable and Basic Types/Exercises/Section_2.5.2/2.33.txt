Using the variable definitions from this section, determine
what happens in each of these assignment:

    int i = 0, &r = i;
    auto a = r;
    const int ci = i, &cr = ci;
    auto b = ci;
    auto c = cr;
    auto d = &i;
    auto e = &ci; 
    const auto f = ci;
    auto &g = ci;
    const auto &j = 42;
    auto k = ci, &l = i;
    auto &m = ci, *p = &ci;
    auto &n = i, *p2 = &ci;

(a) a = 42;
= a is assign by 42
(b) b = 42;
= b is assign by 42
(c) c = 42;
= c is assign by 42
(d) d = 42;
= illegal, d is pointer to int (int*), so you need * before d to initialize it to 42
(e) e = 42;
= illegal, e is pointer to const int (const int *), you need to initialize address-of an object not a literal
(f) g = 42;
= legal, g is reference to const(const int &), after point to ci, it can reassign to another value/object.
