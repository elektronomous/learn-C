One of the major features in the new standard is the ability to move rather than copy
an object. As we saw in § 13.1.1 (p. 497), copies are made in many circumstances. In
some of these circumstances, an object is immediately destroyed after it is copied. In
those cases, moving, rather than copying, the object can provide a significant
performance boost.

A second reason to move rather than copy occurs in classes such as the IO or unique_ptr 
classes. These classes have a resource (suchas a pointer or an IO buffer) that may not be
shared. Hence, objects of these types can’t be copied but can be moved.

The library containers, string, and shared_ptr classes support move as
well as copy. The IO and unique_ptr classes can be moved but not copied.

